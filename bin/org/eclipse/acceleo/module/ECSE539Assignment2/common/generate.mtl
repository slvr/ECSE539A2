[comment encoding = UTF-8 /]
[module generate('http:///fm.ecore', 'http:///grl.ecore', 'http:///urn.ecore')]

[comment  ~~Templates~~ /]

[template public urnToBeans(element : URNspec)]
	[comment @main /]
	[file (element.name.concat('.txt'), false)]
		[for (urn : URNspec | element)]
[generate(urn)/]
		[/for]
	[/file]
[/template]
[template public generate(u : URNspec)]
[if (getNumActors(u) <> 0)]
[u.generateWithActors()/]
[/if]
[if (hasFeatures(u))]
[u.generateWithoutActors()/]
[/if]
[/template]
[template private generateWithActors (u : URNspec)]
[for (a : Actor | u.grlspec.actors)]
actor [a.name/] {
	[for (ie : IntentionalElement | a.getElementsOfActor())]
	[ie.getNodeInformation()/]
	[/for]
}
[/for]
[/template]
[template private generateWithoutActors (u : URNspec)]
features [getRoot(u).name/] [getDecompositionType(getRoot(u))/]{
		[for (e : ElementLink | getRoot(u).linksDest)]
	[e.getFurtherElement()/]
		[/for]
}
[/template]
[template private getFurtherElement (e : ElementLink)]
	[if(e.src.oclAsType(IntentionalElement) = 0)]
		[if(e.oclIsTypeOf(MandatoryFMLink))]
mandatory [e.src.name/][elseif (e.oclIsKindOf(OptionalFMLink))]
optional [e.src.name/][else]
[e.src.name/][/if][else]
		[if(e.oclIsTypeOf(MandatoryFMLink))]
mandatory [e.src.name/] [getDecompositionType(e.src.oclAsType(IntentionalElement))/]{
		[elseif (e.oclIsTypeOf(OptionalFMLink))]
optional [e.src.name/] [getDecompositionType(e.src.oclAsType(IntentionalElement))/]{
		[else]
[e.src.name/] [getDecompositionType(e.src.oclAsType(IntentionalElement))/]{
		[/if]
			[for (e : ElementLink | e.src.linksDest)]
	[getFurtherElement (e)/]
			[/for]
}	[/if]
[/template]
[template private getNodeInformation (ie : IntentionalElement)]
[if (ie.oclIsKindOf(Feature))]
feature [ie.name/] {
[else]
[if(getNodeType(ie) = 'ressource')][comment Quality /]
resource [ie.name/] {
[else]
[getNodeType(ie)/] [ie.name/] {
[/if]
[/if]
	[if(ie.importance.toString() <> 'None')]
	importance [ie.importanceQuantitative/]
	[/if]
	[for(b : Belief | getBeliefs(ie))]
	[b.description/]
	[/for]
	[for(e : ElementLink | ie.linksSrc)]
	[if (e.oclIsTypeOf(Belief))]
	[e.description/]
	[/if]
	[if (e.oclIsTypeOf(Decomposition))]
	[e.dest.oclAsType(IntentionalElement).decompositionType.toString().toLowerCase()/] decomposes [e.dest.name/]
	[/if]
	[if (e.oclIsTypeOf(Contribution))]
	contributesTo [e.dest.name/] [isCorrelated(e.oclAsType(Contribution))/]with [e.oclAsType(Contribution).quantitativeContribution/]
	[/if]
	[/for]
	[for(e : ElementLink | ie.linksDest)]
	[if (e.oclIsTypeOf(Dependency))]
	dependsOn [getIEActorName(e.src.oclAsType(IntentionalElement))/].[e.src.oclAsType(IntentionalElement).name/]
	[/if]
	[/for]
}
[/template]
[comment ~~Queries~~ /]

[query public getNumActors(u : URNspec) : Integer
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getNumActors(urn.URNspec)', Sequence{u})
/]

[query public hasFeatures(u : URNspec) : Boolean
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'hasFeatures(urn.URNspec)', Sequence{u})
/]

[query public getNumDestLinks(ie : IntentionalElement) : Integer
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getNumDestLinks(grl.IntentionalElement)', Sequence{ie})
/]

[query public getRoot(u : URNspec) : IntentionalElement
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getRoot(urn.URNspec)', Sequence{u})
/]

[query public getDecompositionType(ie : IntentionalElement) : String
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getDecompositionType(grl.IntentionalElement)', Sequence{ie})
/]

[query public getNodeType(ie : IntentionalElement) : String
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getNodeType(grl.IntentionalElement)', Sequence{ie})
/]

[query public getElementsOfActor(a : Actor) : Sequence(IntentionalElement)
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getElementsOfActor(grl.Actor)', Sequence{a})
/]

[query public getBeliefs(ie : IntentionalElement) : Sequence(Belief)
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getBeliefs(grl.IntentionalElement)', Sequence{ie})
/]

[query public getIEActorName(ie : IntentionalElement) : String
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'getIEActorName(grl.IntentionalElement)', Sequence{ie})
/]

[query public isCorrelated(c : Contribution) : String
	=invoke('org.eclipse.acceleo.module.ECSE539Assignment2.common.generateQueries', 
		'isCorrelated(grl.Contribution)', Sequence{c})
/]
